function [tr_feat,tr_label,te_feat,te_label] = semiNB_plus(feat,label,indices,k)
%% parameter setting
N_0 = 2000;
knn_K =1;

    test_id = find(indices ==k);
    train_id = find(indices ~=k);

    te_feat = feat(test_id,:);
    te_label = label(test_id,:);

    tr_feat = feat(train_id,:);
    tr_label = label(train_id,:);

    [L_feat,L_label,U_feat,U_label] = divided_data(tr_feat,tr_label,class_lab,0.4);

    NUM_CLASSES = numel(class_lab);
    prior_prob =zeros(NUM_CLASSES,1);
    for c = 1:NUM_CLASSES
        prior_prob(c) = (numel(find(tr_label == c))+ 1/numel(class_lab))/(numel(tr_label)+1);
    end

    NUM_U_SAMPLE = numel(U_label);
    predt_label = zeros(NUM_U_SAMPLE,1);
    for i=1:NUM_U_SAMPLE
        id = knnsearch(L_feat,U_feat(i,:),'K',knn_K);
        temp_label = L_label(id);
        [ia,~,ic] = unique(temp_label);
        mWeight = accumarray(ic,1);
        [~,id_x] = max(mWeight);

        predt_label(i) = ia(id_x);
    end
    %             v_rate(k) = numel(find(predt_label ==U_label))/NUM_U_SAMPLE;
    v_feat = [L_feat;U_feat];
    v_label = [L_label;predt_label];

    [rows,cols] = size(v_feat);
    m_cutPoints = zeros(cols,rows);
    count = zeros(cols,1);
    for j = 1:cols
        attribute = v_feat(:,j);
        [A,I] = sort(attribute);
        labels = v_label(I);
        temp = cutPointsForSubset(A,labels,1,rows+1,1,N_0);
        count(j) = numel(temp);
        m_cutPoints(j,1:count(j))= temp;
    end

    %% discretization on training data
    [rows,cols] = size(tr_feat);
    new_tr_feat = zeros(rows,cols);
    for i = 1:rows
        for j = 1:cols
            cutPoint = m_cutPoints(j,1:count(j));
            [~,idx] =min(abs(tr_feat(i,j)-cutPoint));
            if numel(cutPoint) ==0
                new_tr_feat(i,j) = 1;
            else
                if tr_feat(i,j) <= cutPoint(idx)
                    new_tr_feat(i,j) = idx;
                else
                    new_tr_feat(i,j) = idx+1;
                end
            end
        end
    end
    [rows,cols] =size(te_feat);
    new_te_feat = zeros(size(te_feat));
    for i = 1:rows
        for j = 1:cols
            cutPoint = m_cutPoints(j,1:count(j));
            [~,idx] =min(abs(te_feat(i,j)-cutPoint));
            if numel(cutPoint) ==0
                new_te_feat(i,j) = 1;
            else
                if te_feat(i,j) <= cutPoint(idx)
                    new_te_feat(i,j) = idx;
                else
                    new_te_feat(i,j) = idx+1;
                end
            end
        end
    end

    tr_feat = new_tr_feat;
    te_feat = new_te_feat;



    NUM_CLASSES = numel(class_lab);
    NUM_TE_ATTRI = numel(te_label);
    prior_prob =zeros(NUM_CLASSES,1);
    predt_label = zeros(NUM_TE_ATTRI,1);
    for c = 1:NUM_CLASSES
        prior_prob(c) = (numel(find(tr_label == c))+ 1/numel(class_lab))/(numel(tr_label)+1);
    end

    for i =1:NUM_TE_ATTRI
        prob = zeros(cols,NUM_CLASSES);
        for j = 1:cols
            attribute = tr_feat(:,j);
            for c =1:NUM_CLASSES
                [m_count,ia,ic] = unique(attribute(tr_label==c));
                mWeight = accumarray(ic,1);
                id = find(m_count == te_feat(i,j));
                if isempty(mWeight)
                    prob(j,c) = 1/numel(unique(attribute))/(sum(mWeight)+1);
                else
                    if isempty(id)
                        prob(j,c) = 1/numel(unique(attribute))/(sum(mWeight)+1);
                    else
                        prob(j,c) = (mWeight(id)+1/numel(unique(attribute)))/ (sum(mWeight)+1);
                    end
                end
            end
        end
        post_prob = prior_prob'.*prod(prob);

        [~,id] = max(post_prob);
        predt_label(i) = id;
    end
    rate = numel(find(predt_label ==te_label))/NUM_TE_ATTRI;
    rates(k) = rate
end
rates = rates';